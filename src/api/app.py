"""
FastAPI web application for the Vendor Risk Assessment system
"""

from fastapi import FastAPI, HTTPException, BackgroundTasks, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from typing import List, Dict, Any
import asyncio
import os
from pathlib import Path

from ..main import VendorRiskAssessmentOrchestrator
from ..models.schemas import (
    AssessmentRequest, AssessmentResult, APIResponse,
    Vendor, VendorCreate, VendorAssessment
)
from ..config.settings import settings

# Create FastAPI app
app = FastAPI(
    title=settings.app_name,
    version=settings.app_version,
    description="AI-powered vendor risk assessment and compliance screening system"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure appropriately for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount static files
static_path = Path(__file__).parent / "static"
if static_path.exists():
    app.mount("/static", StaticFiles(directory=str(static_path)), name="static")

# Initialize the assessment orchestrator
risk_orchestrator = VendorRiskAssessmentOrchestrator()

@app.get("/", response_class=HTMLResponse)
async def read_root():
    """Serve the main UI"""
    static_file_path = static_path / "index.html"
    if static_file_path.exists():
        with open(static_file_path, 'r', encoding='utf-8') as f:
            return HTMLResponse(content=f.read(), status_code=200)
    else:
        return HTMLResponse(
            content="""
            <html>
                <head><title>Vendor Risk Assessment AI</title></head>
                <body>
                    <h1>Vendor Risk Assessment AI</h1>
                    <p>UI files not found. Please ensure static files are properly installed.</p>
                    <p><a href="/docs">View API Documentation</a></p>
                </body>
            </html>
            """,
            status_code=200
        )

@app.on_event("startup")
async def startup_event():
    """Initialize the application on startup"""
    pass

# API Routes for the UI
@app.post("/api/v1/assessments")
async def create_assessment(request: dict):
    """Create a new vendor assessment"""
    try:
        # Generate a unique assessment ID
        import uuid
        assessment_id = str(uuid.uuid4())
        
        # For demo purposes, we'll simulate the assessment
        # In production, this would start a background task
        
        return {
            "success": True,
            "assessment_id": assessment_id,
            "message": "Assessment started successfully",
            "estimated_completion": "15 minutes"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/assessments/{assessment_id}")
async def get_assessment(assessment_id: str):
    """Get assessment status and results"""
    try:
        # For demo, return mock completed assessment
        return {
            "assessment_id": assessment_id,
            "status": "completed",
            "progress": 100,
            "results": {
                "vendor_name": "Demo Vendor",
                "risk_score": 75,
                "compliance_score": 80,
                "security_score": 70,
                "findings": []
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/")
async def root():
    """Root endpoint"""
    return {
        "message": "Vendor Risk Assessment API",
        "version": settings.app_version,
        "environment": settings.environment
    }


@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "timestamp": "2025-08-07T00:00:00Z",
        "version": settings.app_version
    }


@app.post("/api/v1/assessments", response_model=APIResponse)
async def create_assessment(
    request: AssessmentRequest,
    background_tasks: BackgroundTasks
):
    """
    Create a new vendor risk assessment
    
    Args:
        request: Assessment request data
        background_tasks: FastAPI background tasks
        
    Returns:
        API response with assessment ID
    """
    try:
        # Start assessment in background
        assessment_id = 1  # Would be generated by database
        
        background_tasks.add_task(
            run_assessment_background,
            assessment_id,
            request
        )
        
        return APIResponse(
            success=True,
            message="Assessment started successfully",
            data={
                "assessment_id": assessment_id,
                "status": "in_progress",
                "vendor_domain": request.vendor_domain
            }
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v1/assessments/sync", response_model=AssessmentResult)
async def create_assessment_sync(request: AssessmentRequest):
    """
    Create and run vendor risk assessment synchronously
    
    Args:
        request: Assessment request data
        
    Returns:
        Complete assessment result
    """
    try:
        result = await risk_orchestrator.comprehensive_assessment(
            vendor_domain=request.vendor_domain,
            vendor_name=request.vendor_name,
            assessment_criteria={
                "data_sensitivity": request.custom_criteria.get("data_sensitivity", "high"),
                "regulations": request.custom_criteria.get("regulations", ["GDPR", "SOC2"]),
                "business_criticality": request.custom_criteria.get("business_criticality", "high")
            }
        )
        
        return result
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/assessments/{assessment_id}")
async def get_assessment(assessment_id: int):
    """
    Get assessment status and results
    
    Args:
        assessment_id: Assessment ID
        
    Returns:
        Assessment data
    """
    try:
        # For now, return a mock status since we don't have persistent storage
        status = {
            "assessment_id": assessment_id,
            "status": "completed",
            "progress": 100,
            "message": "Assessment completed successfully"
        }
        return APIResponse(
            success=True,
            message="Assessment retrieved successfully",
            data=status
        )
        
    except Exception as e:
        raise HTTPException(status_code=404, detail="Assessment not found")


@app.get("/api/v1/vendors")
async def list_vendors(skip: int = 0, limit: int = 100):
    """
    List all vendors
    
    Args:
        skip: Number of records to skip
        limit: Maximum number of records to return
        
    Returns:
        List of vendors
    """
    # Mock data for now
    vendors = [
        {
            "id": 1,
            "name": "Example Vendor",
            "domain": "example.com",
            "created_at": "2025-08-07T00:00:00Z"
        }
    ]
    
    return APIResponse(
        success=True,
        message="Vendors retrieved successfully",
        data={
            "vendors": vendors,
            "total": len(vendors),
            "skip": skip,
            "limit": limit
        }
    )


@app.post("/api/v1/vendors", response_model=APIResponse)
async def create_vendor(vendor: VendorCreate):
    """
    Create a new vendor
    
    Args:
        vendor: Vendor creation data
        
    Returns:
        Created vendor data
    """
    try:
        # Mock vendor creation
        created_vendor = {
            "id": 1,
            "name": vendor.name,
            "domain": vendor.domain,
            "contact_email": vendor.contact_email,
            "created_at": "2025-08-07T00:00:00Z"
        }
        
        return APIResponse(
            success=True,
            message="Vendor created successfully",
            data=created_vendor
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/vendors/{vendor_id}/assessments")
async def get_vendor_assessments(vendor_id: int):
    """
    Get all assessments for a vendor
    
    Args:
        vendor_id: Vendor ID
        
    Returns:
        List of assessments for the vendor
    """
    # Mock data
    assessments = [
        {
            "id": 1,
            "vendor_id": vendor_id,
            "status": "completed",
            "overall_risk_score": 65.5,
            "risk_category": "medium",
            "started_at": "2025-08-07T00:00:00Z",
            "completed_at": "2025-08-07T01:00:00Z"
        }
    ]
    
    return APIResponse(
        success=True,
        message="Vendor assessments retrieved successfully",
        data=assessments
    )


@app.get("/api/v1/reports/risk-summary")
async def get_risk_summary():
    """
    Get risk summary report across all vendors
    
    Returns:
        Risk summary statistics
    """
    # Mock summary data
    summary = {
        "total_vendors": 25,
        "total_assessments": 47,
        "risk_distribution": {
            "low": 8,
            "medium": 12,
            "high": 5,
            "critical": 2
        },
        "avg_risk_score": 58.3,
        "pending_reviews": 3,
        "overdue_follow_ups": 1
    }
    
    return APIResponse(
        success=True,
        message="Risk summary retrieved successfully",
        data=summary
    )


@app.get("/api/v1/reports/compliance-gaps")
async def get_compliance_gaps():
    """
    Get compliance gaps report
    
    Returns:
        Common compliance gaps across vendors
    """
    gaps = [
        {
            "gap_type": "missing_soc2",
            "vendor_count": 8,
            "severity": "high",
            "description": "SOC 2 Type II report not provided"
        },
        {
            "gap_type": "unclear_encryption",
            "vendor_count": 5,
            "severity": "medium",
            "description": "Encryption practices not clearly documented"
        },
        {
            "gap_type": "missing_dpa",
            "vendor_count": 3,
            "severity": "medium",
            "description": "Data Processing Agreement not executed"
        }
    ]
    
    return APIResponse(
        success=True,
        message="Compliance gaps retrieved successfully",
        data=gaps
    )


async def run_assessment_background(assessment_id: int, request: AssessmentRequest):
    """
    Run assessment in background
    
    Args:
        assessment_id: Assessment ID
        request: Assessment request
    """
    try:
        result = await risk_orchestrator.comprehensive_assessment(
            vendor_domain=request.vendor_domain,
            vendor_name=request.vendor_name,
            assessment_criteria={
                "data_sensitivity": request.custom_criteria.get("data_sensitivity", "high"),
                "regulations": request.custom_criteria.get("regulations", ["GDPR", "SOC2"]),
                "business_criticality": request.custom_criteria.get("business_criticality", "high")
            }
        )
        
        # In a real implementation, would save result to database
        print(f"Background assessment {assessment_id} completed")
        
    except Exception as e:
        print(f"Background assessment {assessment_id} failed: {str(e)}")


if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "api.app:app",
        host="0.0.0.0",
        port=8026,
        reload=settings.debug
    )
